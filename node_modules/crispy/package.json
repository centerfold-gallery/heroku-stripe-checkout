{
  "name": "crispy",
  "version": "3.2.0",
  "description": "A JavaScript style guide packaged with syntax and style checkers.",
  "repository": {
    "type": "git",
    "url": "https://github.com/christophercliff/crispy.git"
  },
  "author": {
    "name": "Christopher Cliff"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/christophercliff/crispy/issues"
  },
  "homepage": "https://github.com/christophercliff/crispy",
  "bin": {
    "crispy": "./bin/crispy"
  },
  "dependencies": {
    "jscs": "^1.9.0",
    "jshint": "^2.5.11"
  },
  "readme": "# Crispy\n\nThis is a guide for writing consistent and aesthetically pleasing JavaScript. It is inspired by what is popular within the community, and flavored with some personal opinions.\n\nIt includes configuration for [JSHint](https://github.com/jshint/jshint/) and [JSCS](https://github.com/jscs-dev/node-jscs).\n\n## Installation\n\n```\n$ npm install crispy\n```\n\n## Usage\n\n```\n$ ./node_modules/.bin/crispy ./lib/ ./test/\n```\n\nBetter yet, include in your test runner so violations break the build:\n\n```json\n\"scripts\": {\n  \"style\": \"./node_modules/.bin/crispy ./lib/ ./test/\",\n  \"test\": \"npm run style && ./node_modules/.bin/mocha\"\n}\n```\n\n## The Rules\n\n### 4 Spaces for indention\n\nUse 4 spaces for indenting your code and swear an oath to never mix tabs and\nspaces—a special kind of hell is awaiting you otherwise.\n\n### Newlines\n\nUse UNIX-style newlines (`\\n`), and a newline character as the last character\nof a file. Windows-style newlines (`\\r\\n`) are forbidden inside any repository.\n\n### No trailing whitespace\n\nJust like you brush your teeth after every meal, you clean up any trailing whitespace in your JS files before committing. Otherwise the rotten smell of careless neglect will eventually drive away contributors and/or co-workers.\n\n### Don't use semicolons unless you have to\n\nThere are rare occasions where you need a semicolon. Read about them [here](http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding).\n\n### 80(ish) characters per line\n\nLimit your lines to 80 characters. Yes, screens have gotten much bigger over the last few years, but your brain has not. Use the additional room for split screen, your editor supports that, right? And increase the font size so your colleague standing behind can read it too.\n\n### Use single quotes\n\nUse single quotes, unless you're writing JSON.\n\n*Right:*\n\n```js\nvar foo = 'bar'\n```\n\n*Wrong:*\n\n```js\nvar foo = \"bar\"\n```\n\n### Opening braces go on the same line\n\nYour opening braces go on the same line as the statement.\n\n*Right:*\n\n```js\nif (true) {\n    console.log('winning')\n}\n```\n\n*Wrong:*\n\n```js\nif (true)\n{\n    console.log('losing')\n}\n```\n\nAlso, notice the use of whitespace before and after the condition statement.\n\n### Declare one variable per var statement\n\nDeclare one variable per var statement, it makes it easier to re-order the lines. Put them at the beginning of the function body.\n\n*Right:*\n\n```js\nvar keys   = ['foo', 'bar']\nvar values = [23, 42]\nvar object = {}\nvar key\n\nwhile (items.length) {\n    key = keys.pop()\n    object[key] = values.pop()\n}\n```\n\n*Wrong:*\n\n```js\nvar keys = ['foo', 'bar'],\n    values = [23, 42],\n    object = {},\n    key;\n\nwhile (items.length) {\n    key = keys.pop()\n    object[key] = values.pop()\n}\n```\n\n### Use lowerCamelCase for variables, properties and function names\n\nVariables, properties and function names should use `lowerCamelCase`.  They should also be descriptive. Single character variables and uncommon abbreviations should generally be avoided.\n\n*Right:*\n\n```js\nvar adminUser = db.query('SELECT * FROM users ...')\n```\n\n*Wrong:*\n\n```js\nvar admin_user = db.query('SELECT * FROM users ...')\n```\n\n### Use UpperCamelCase for class names\n\nClass names should be capitalized using `UpperCamelCase`.\n\n*Right:*\n\n```js\nfunction BankAccount() {}\n```\n\n*Wrong:*\n\n```js\nfunction bank_Account() {}\n```\n\n### Use UPPERCASE for Constants\n\nConstants should be declared as regular variables or static class properties, using all uppercase letters.\n\nNode.js/V8 actually supports mozilla's [const][const] extension, but\nunfortunately that cannot be applied to class members, nor is it part of any\nECMA standard.\n\n*Right:*\n\n```js\nvar SECOND = 1 * 1000\n\nfunction File() {}\n\nFile.FULL_PERMISSIONS = 0777\n```\n\n*Wrong:*\n\n```js\nconst SECOND = 1 * 1000\n\nfunction File() {}\n\nFile.fullPermissions = 0777\n```\n\n[const]: https://developer.mozilla.org/en/JavaScript/Reference/Statements/const\n\n### Object/Array creation\n\nUse trailing commas and put *short* declarations on a single line. Only quote keys when your interpreter complains:\n\n*Right:*\n\n```js\nvar a = ['hello', 'world']\nvar b = {\n    good: 'code',\n    'is generally': 'pretty'\n}\n```\n\n*Wrong:*\n\n```js\nvar a = [\n  'hello', 'world'\n]\nvar b = {\"good\": 'code'\n        , is generally: 'pretty'\n        }\n```\n\n### Use the === operator\n\nProgramming is not about remembering [stupid rules][comparisonoperators]. Use the triple equality operator as it will work just as expected.\n\n*Right:*\n\n```js\nvar a = 0\nif (a === '') {\n    console.log('winning')\n}\n\n```\n\n*Wrong:*\n\n```js\nvar a = 0\nif (a == '') {\n    console.log('losing')\n}\n```\n\n[comparisonoperators]: https://developer.mozilla.org/en/JavaScript/Reference/Operators/Comparison_Operators\n\n### Use multi-line ternary operator\n\nThe ternary operator should not be used on a single line. Split it up into multiple lines instead.\n\n*Right:*\n\n```js\nvar foo = (a === b)\n    ? 1\n    : 2\n```\n\n*Wrong:*\n\n```js\nvar foo = (a === b) ? 1 : 2\n```\n\n### Do not extend built-in prototypes\n\nDo not extend the prototype of native JavaScript objects. Your future self will be forever grateful.\n\n*Right:*\n\n```js\nvar a = []\nif (!a.length) {\n    console.log('winning')\n}\n```\n\n*Wrong:*\n\n```js\nArray.prototype.empty = function() {\n    return !this.length\n}\n\nvar a = []\nif (a.empty()) {\n    console.log('losing')\n}\n```\n\n### Use descriptive conditions\n\nAny non-trivial conditions should be assigned to a descriptive variable:\n\n*Right:*\n\n```js\nvar isAuthorized = (user.isAdmin() || user.isModerator())\nif (isAuthorized) {\n    console.log('winning')\n}\n```\n\n*Wrong:*\n\n```js\nif (user.isAdmin() || user.isModerator()) {\n    console.log('losing')\n}\n```\n\n### Write small functions\n\nKeep your functions short. A good function fits on a slide that the people in the last row of a big room can comfortably read. So don't count on them having perfect vision and limit yourself to ~15 lines of code per function.\n\n### Return early from functions\n\nTo avoid deep nesting of if-statements, always return a function's value as early as possible.\n\n*Right:*\n\n```js\nfunction isPercentage(val) {\n    if (val < 0) return false\n    if (val > 100) return false\n    return true\n}\n```\n\n*Wrong:*\n\n```js\nfunction isPercentage(val) {\n    if (val >= 0) {\n        if (val < 100) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n```\n\n### Don't nest closures\n\nUse closures, but try not to nest them. Otherwise your code will become a mess.\n\n*Right:*\n\n```js\nsetTimeout(function() {\n    client.connect(afterConnect)\n}, 1e3)\n\nfunction afterConnect() {\n    console.log('winning')\n}\n```\n\n*Wrong:*\n\n```js\nsetTimeout(function() {\n    client.connect(function() {\n        console.log('losing')\n    })\n}, 1e3)\n```\n\n### Callbacks must be ALWAYS immediate or ALWAYS deferred\n\nisaacs posted a nice explanation [here](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony).\n\n*Right:*\n\n```js\nfunction myAsyncFn(stuff, callback) {\n    if (!stuff) {\n        return process.nextTick(function(){\n            return callback(new Error('stuff is undefined'))\n        })\n    }\n    return doSomeSlowStuff(stuff, callback)\n}\n```\n\n*Wrong:*\n\n```js\nfunction myAsyncFn(stuff, callback) {\n    if (!stuff) {\n        return callback(new Error('stuff is undefined')) // Sometimes returns now...\n    }\n    return doSomeSlowStuff(stuff, callback) // Other times returns later\n}\n```\n\n### Object.freeze, Object.preventExtensions, Object.seal, with, eval\n\nCrazy shit that you will probably never need. Stay away from it.\n\n## License\n\nMIT, see [LICENSE](https://github.com/christophercliff/crispy/blob/master/LICENSE.md) for details.\n\n## Acknowledgements\n\nThe original version of this guide was created by [Felix Geisendörfer](http://felixge.de/).\n",
  "readmeFilename": "README.md",
  "gitHead": "d7ba35be8c8833021b001d2cf57d9b26a9c22f45",
  "_id": "crispy@3.2.0",
  "scripts": {},
  "_shasum": "06574f30757c06c493c128eabb004d6a181c01dd",
  "_from": "crispy@^3.2.0"
}
